<?php
/**
 * Admin elements for the Buffer for WordPress plugin
 * admin/cc-wp-buffer-admin.php
 **/

/**
 * Admin plugin class
 * Extends main plugin class
 **/
class cc_wp_buffer_admin extends cc_wp_buffer {
	// Class constructor
	function __construct() {
		// Initialize
		$this->initialize();
		
		/* Hooks and filters */
		add_action( 'admin_menu', array( &$this, 'create_options_menu' ) ); // Add menu entry to Settings menu
		add_action( 'admin_init', array( &$this, 'set_options_init' ) ); // Initialize plugin options
		/* End hooks and filters */
	} // End __construct()
	
	/*
	===== Admin Plugin Options =====
	*/
	// Create submenu entry under the Settings menu
	function create_options_menu() {
		add_options_page(
			self::NAME, // Page title. This is displayed in the browser title bar.
			self::NAME, // Menu title. This is displayed in the Settings submenu.
			'manage_options', // Capability required to access the options page for this plugin
			self::ID, // Menu slug
			array( &$this, 'options_page' ) // Function to render the options page
		);
	} // End create_options_menu()
	
	// Render options page
	function options_page() {
		// Make sure the user has the necessary privileges to manage plugin options
		if ( ! current_user_can( 'manage_options' ) ) {
			wp_die( 'Sorry, you do not have sufficient privileges to access the plugin options for ' . self::NAME . '.' );
		}
		?>
		
		<div class="wrap">
			<?php screen_icon(); ?>
			<h2><?php echo self::NAME; ?></h2>
			
			<form action="options.php" method="post">
				<?php
				settings_fields( $this->prefix . 'options_fields' ); // Retrieve the fields created for plugin options
				do_settings_sections( self::ID ); // Display the section(s) for the options page
				submit_button(); // Form submit button generated by WordPress
				?>
			</form>
		</div>
		
		<?php
	} // End options_page()
	
	// Set up options page
	function set_options_init() {
		// Register the plugin settings
		register_setting(
			$this->prefix . 'options_fields', // The namespace for plugin options fields. This must match settings_fields() used when rendering the form.
			$this->prefix . 'options', // The name of the plugin options entry in the database.
			array( &$this, 'options_validate' ) // The callback method to validate plugin options
		);
		
		// Load plugin options for authorization
		$this->auth_options();
		
		// If client ID & secret are saved, load the rest of the options
		if ( $this->options['client_id'] && $this->options['client_secret'] ) {
			// Options page sections and fields
			$this->set_options_sections();
			$this->set_options_fields();
		}
	} // End set_options_init()
	
	// Options for Buffer authorization
	function auth_options() {
		// Options section
		add_settings_section(
			'auth', // Name of the section
			'Authorization', // Title of the section, displayed on the options page
			array( &$this, 'auth_callback' ), // Callback method to display plugin options
			self::ID // Page ID for the options page
		);
		
		// Buffer application client ID
		add_settings_field(
			'client_id', // Field ID
			'Client ID', // Field title/label, displayed to the user
			array( &$this, 'client_id_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'auth' // Settings section in which to display the field
		);
		
		// Buffer application client secret
		add_settings_field(
			'client_secret', // Field ID
			'Client secret', // Field title/label, displayed to the user
			array( &$this, 'client_secret_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'auth' // Settings section in which to display the field
		);
	} // End auth_options()
	
	// Set up options page sections
	function set_options_sections() {		
		// Twitter settings
		add_settings_section(
			'twitter', // Name of the section
			'Twitter', // Title of the section, displayed on the options page
			array( &$this, 'twitter_callback' ), // Callback method to display plugin options
			self::ID // Page ID for the options page
		);
		
		// Facebook settings
		add_settings_section(
			'fb', // Name of the section
			'Facebook', // Title of the section, displayed on the options page
			array( &$this, 'fb_callback' ), // Callback method to display plugin options
			self::ID // Page ID for the options page
		);
		
		// LinkedIn settings
		add_settings_section(
			'linkedin', // Name of the section
			'LinkedIn', // Title of the section, displayed on the options page
			array( &$this, 'linkedin_callback' ), // Callback method to display plugin options
			self::ID // Page ID for the options page
		);
	} // End set_options_sections()
	
	// Set up options fields
	function set_options_fields() {
		// Buffer access token for account used globally on the WordPress site
		add_settings_field(
			'access_token', // Field ID
			NULL, // Field title/label, displayed to the user
			array( &$this, 'access_token_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'auth' // Settings section in which to display the field
		);
		
		// Enable Twitter
		add_settings_field(
			'twitter_send', // Field ID
			'Send Posts to Twitter', // Field title/label, displayed to the user
			array( &$this, 'twitter_send_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'twitter' // Settings section in which to display the field
		);
		
		// Default syntax for Twitter messages
		add_settings_field(
			'twitter_publish_syntax', // Field ID
			'Tweet Format', // Field title/label, displayed to the user
			array( &$this, 'twitter_publish_syntax_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'twitter' // Settings section in which to display the field
		);
		
		// Schedule for Twitter messsages
		add_settings_field(
			'twitter_schedule', // Field ID
			'Schedule for Tweets', // Field title/label, displayed to the user
			array( &$this, 'twitter_schedule_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'twitter' // Settings section in which to display the field
		);
		
		// Enable Facebook
		add_settings_field(
			'fb_send', // Field ID
			'Send Posts to Facebook', // Field title/label, displayed to the user
			array( &$this, 'fb_send_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'fb' // Settings section in which to display the field
		);
		
		// Default syntax for Facebook messages
		add_settings_field(
			'fb_publish_syntax', // Field ID
			'Facebook Post Format', // Field title/label, displayed to the user
			array( &$this, 'fb_publish_syntax_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'fb' // Settings section in which to display the field
		);
		
		// Schedule for Facebook messages
		add_settings_field(
			'fb_schedule', // Field ID
			'Schedule for Facebook Posts', // Field title/label, displayed to the user
			array( &$this, 'fb_schedule_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'fb' // Settings section in which to display the field
		);
		
		// Enable LinkedIn
		add_settings_field(
			'twitter_send', // Field ID
			'Send Posts to LinkedIn', // Field title/label, displayed to the user
			array( &$this, 'linkedin_send_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'linkedin' // Settings section in which to display the field
		);
		
		// Default syntax for LinkedIn messages
		add_settings_field(
			'linkedin_publish_syntax', // Field ID
			'LinkedIn Post Format', // Field title/label, displayed to the user
			array( &$this, 'linkedin_publish_syntax_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'linkedin' // Settings section in which to display the field
		);
		
		// Schedule for LinkedIn
		add_settings_field(
			'linkedin_schedule', // Field ID
			'Schedule for LinkedIn Posts', // Field title/label, displayed to the user
			array( &$this, 'linkedin_schedule_callback' ), // Callback method to display the option field
			self::ID, // Page ID for the options page
			'linkedin' // Settings section in which to display the field
		);
	} // End set_options_fields()
	
	/* Plugin options callbacks */
	// Authorization section
	function auth_callback() {
		// If client ID & secret haven't yet been saved, display this message
		if ( ! $this->options['client_id'] || ! $this->options['client_secret'] ) {
			echo '<p style="color: #E30000;">In order to use this plugin, you need to <a href="https://bufferapp.com/developers/apps/create" target="_blank">register it as a Buffer application</a>.</p><p>Once Client ID and Client Secret are set, the rest of the plugin options will be available.</p>';
		}
		// If they have been saved, display this one instead
		else {
			echo '<p style="color: #199E22;">This site has been set up with valid Buffer app credentials! Have fun!';
		}
	} // End auth_callback()
	
	// Twitter section
	function twitter_callback() {
		echo '<p>Please set up your options for sending to Twitter.';
	} // End twitter_callback()
	
	// Facebook section
	function fb_callback() {
		echo '<p>Please set up your options for sending to Facebook.';
	} // End fb_callback()
	
	// LinkedIn section
	function linkedin_callback() {
		echo '<p>Please set up your options for sending to LinkedIn.';
	} // End linkedin_callback()
	
	// Client ID
	function client_id_callback() {
		?>
		<input type="text" name="<?php echo $this->prefix; ?>options[client_id]" id="<?php echo $this->prefix; ?>options[client_id]" value="<?php echo $this->options['client_id']; ?>" size=40>
		<?php
	} // End client_id_callback()
	
	// Client secret
	function client_secret_callback() {
		// If client secret is saved in the database, the field is type 'password'. If not, it's type 'text'.
		if ( $this->options['client_secret'] ) {
			echo '<input type="password" name="' . $this->prefix . 'options[client_secret]" id="' . $this->prefix . 'options[client_secret]" value="' . $this->options['client_secret'] . '" size=40>';
		}
		else {
			echo '<input type="text" name="' . $this->prefix . 'options[client_secret]" id="' . $this->prefix . 'options[client_secret]" value="' . $this->options['client_secret'] . '" size=40>';
		}
	} // End client_id_callback()
	
	// Access token
	function access_token_callback() {
		
	} // End client_id_callback()
	
	// Enable Twitter
	function twitter_send_callback() {
		
	} // End twitter_send_callback()
	
	// Twitter syntax
	function twitter_publish_syntax_callback() {
		
	} // End twitter_publish_syntax_callback()
	
	// Twitter schedule
	function twitter_schedule_callback() {
		
	} // End twitter_schedule_callback()
	
	// Enable Facebook
	function fb_send_callback() {
		
	} // End fb_send_callback()
	
	// Facebook syntax
	function fb_publish_syntax_callback() {
		
	} // End fb_publish_syntax_callback()
	
	// Facebook schedule
	function fb_schedule_callback() {
		
	} // End fb_schedule_callback()
	
	// Enable LinkedIn
	function linkedin_send_callback() {
		
	} // End linkedin_send_callback()
	
	// LinkedIn syntax
	function linkedin_publish_syntax_callback() {
		
	} // End linkedin_publish_syntax_callback()
	
	// LinkedIn schedule
	function linkedin_schedule_callback() {
		
	} // End linkedin_schedule_callback()
	/* End plugin options callbacks */
	
	// Validate plugin options
	function options_validate( $input ) {
		// Set a local variable for the existing plugin options. This is so we don't mix up data.
		$options = $this->options;
		
		// If client ID and client secret have been changed from what's in the database, validate them
		if ( ( $input['client_id'] != $this->options['client_id'] ) || ( $input['client_secret'] != $this->options['client_secret'] ) ) {
			$options['client_id'] = $input['client_id']; // Application client ID
			$options['client_secret'] = $input['client_secret']; // Application client secret
		}
		
		return $options;
	} // End options_validate()
	/*
	===== End Admin Plugin Options =====
	*/
	
	/*
	===== Plugin Activation and Deactivation =====
	*/
	// Plugin activation
	public function activate() {
		// Check to make sure the version of WordPress being used is compatible with the plugin
		if ( version_compare( get_bloginfo( 'version' ), self::VERSION, '<' ) ) {
	 		wp_die( 'Your version of WordPress is too old to use this plugin. Please upgrade to the latest version of WordPress.' );
	 	}
	 	
	 	// Default plugin options
	 	$options = array(
	 		'client_id' => NULL, // Application client ID
	 		'client_secret' => NULL, // Application client secret
	 		'access_token' => NULL, // Access token, for the Buffer account used to publish posts globally
	 		'twitter_send' => NULL, // Don't enable Twitter by default
	 		'twitter_publish_syntax' => 'New Post: {title} {url}', // Default syntax of Twitter messages
	 		'twitter_schedule' => NULL, // Default schedule for Twitter
	 		'fb_send' => NULL, // Don't enable Facebook by default
	 		'fb_publish_syntax' => 'New Post: {title} {url}', // Default syntax of Facebook messages
	 		'fb_schedule' => NULL, // Default schedule for Facebook
	 		'linkedin_send' => NULL, // Don't enable LinkedIn by default
	 		'linkedin_publish_syntax' => 'New Post: {title} {url}', // Default syntax of LinkedIn messages
	 		'linkedin_schedule' => NULL, // Default schedule for Facebook
	 	);
	 	
	 	// Add options to database
	 	add_option( $this->prefix . 'options', $options );
	} // End activate()
	
	// Plugin deactivation
	public function deactivate() {
		// Remove the plugin options from the database
		delete_option( $this->prefix . 'options' );
	} // End deactivate
	/*
	===== End Plugin Activation and Deactivation =====
	*/
}
?>